'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var formatName = require('./formatName.js');
var constants = require('./constants.js');
var identifyScripts = require('./utilities/identifyScripts.js');
var getGraphemes = require('./utilities/getGraphemes.js');

// Note: A similar Ruby implementation of this function also exists at https://github.com/Shopify/shopify-i18n/blob/main/lib/shopify-i18n/name_formatter.rb.
function abbreviateName({
  name,
  locale,
  options
}) {
  var _tryAbbreviateName;
  return (_tryAbbreviateName = tryAbbreviateName({
    givenName: name.givenName,
    familyName: name.familyName,
    idealMaxLength: options === null || options === void 0 ? void 0 : options.idealMaxLength
  })) !== null && _tryAbbreviateName !== void 0 ? _tryAbbreviateName : formatName.formatName({
    name,
    locale
  });
}
function tryAbbreviateName({
  givenName,
  familyName,
  idealMaxLength = 3
}) {
  if (!givenName && !familyName) {
    return undefined;
  }
  const givenNameTrimmed = givenName === null || givenName === void 0 ? void 0 : givenName.trim();
  const familyNameTrimmed = familyName === null || familyName === void 0 ? void 0 : familyName.trim();
  const combinedName = [givenNameTrimmed, familyNameTrimmed].join('');
  if (new RegExp(`${constants.UnicodeCharacterSet.Punctuation}|\\s`).test(combinedName)) {
    return undefined;
  }
  const scripts = identifyScripts.identifyScripts(combinedName);
  if (scripts.length !== 1) {
    return undefined;
  }
  const script = scripts[0];
  switch (script) {
    case constants.UnicodeCharacterSet.Latin:
      return [givenNameTrimmed === null || givenNameTrimmed === void 0 ? void 0 : givenNameTrimmed[0], familyNameTrimmed === null || familyNameTrimmed === void 0 ? void 0 : familyNameTrimmed[0]].join('');
    case constants.UnicodeCharacterSet.Han:
    case constants.UnicodeCharacterSet.Katakana:
    case constants.UnicodeCharacterSet.Hiragana:
      return familyNameTrimmed;
    case constants.UnicodeCharacterSet.Hangul:
      if (givenNameTrimmed) {
        if (givenNameTrimmed.length > idealMaxLength) {
          var _getGraphemes;
          return (_getGraphemes = getGraphemes.getGraphemes({
            text: givenNameTrimmed,
            locale: 'ko'
          })) === null || _getGraphemes === void 0 ? void 0 : _getGraphemes[0];
        } else {
          return givenNameTrimmed;
        }
      } else {
        return familyNameTrimmed;
      }
    case constants.UnicodeCharacterSet.Thai:
      if (givenNameTrimmed) {
        var _getGraphemes2;
        return (_getGraphemes2 = getGraphemes.getGraphemes({
          text: givenNameTrimmed,
          locale: 'th'
        })) === null || _getGraphemes2 === void 0 ? void 0 : _getGraphemes2[0];
      } else {
        var _getGraphemes3;
        return (_getGraphemes3 = getGraphemes.getGraphemes({
          text: familyNameTrimmed,
          locale: 'th'
        })) === null || _getGraphemes3 === void 0 ? void 0 : _getGraphemes3[0];
      }
    default:
      return undefined;
  }
}

exports.abbreviateName = abbreviateName;
exports.tryAbbreviateName = tryAbbreviateName;
