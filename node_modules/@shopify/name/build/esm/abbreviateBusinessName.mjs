import { UnicodeCharacterSet } from './constants.mjs';
import { identifyScripts } from './utilities/identifyScripts.mjs';
import { getGraphemes } from './utilities/getGraphemes.mjs';

// Note: A similar Ruby implementation of this function also exists at https://github.com/Shopify/shopify-i18n/blob/main/lib/shopify-i18n/business_name_formatter.rb.
function abbreviateBusinessName({
  name,
  idealMaxLength
}) {
  var _tryAbbreviateBusines;
  return (_tryAbbreviateBusines = tryAbbreviateBusinessName({
    name,
    idealMaxLength
  })) !== null && _tryAbbreviateBusines !== void 0 ? _tryAbbreviateBusines : name;
}
function tryAbbreviateBusinessName({
  name,
  idealMaxLength = 3
}) {
  const nameTrimmed = name.trim();
  const scripts = identifyScripts(nameTrimmed);
  if (scripts.length !== 1) {
    return undefined;
  }
  const script = scripts[0];
  const words = nameTrimmed.split(' ');
  switch (script) {
    case UnicodeCharacterSet.Latin:
      if (words.length === 1) {
        return words[0].slice(0, idealMaxLength);
      } else if (words.length <= idealMaxLength) {
        return words.map(word => word[0]).join('');
      } else {
        return words.slice(0)[0][0] + words.slice(-1)[0][0];
      }
    case UnicodeCharacterSet.Han:
    case UnicodeCharacterSet.Katakana:
    case UnicodeCharacterSet.Hiragana:
      {
        if (nameTrimmed.includes(' ')) {
          return undefined;
        } else {
          return nameTrimmed;
        }
      }
    case UnicodeCharacterSet.Hangul:
      {
        var _getGraphemes;
        const firstWord = nameTrimmed.split(' ')[0];
        return (_getGraphemes = getGraphemes({
          text: firstWord,
          locale: 'ko'
        })) === null || _getGraphemes === void 0 ? void 0 : _getGraphemes.slice(0, idealMaxLength).join('');
      }
    case UnicodeCharacterSet.Thai:
      {
        // Thai language does not use spaces between words
        if (nameTrimmed.includes(' ')) {
          return undefined;
        } else {
          var _getGraphemes2;
          return (_getGraphemes2 = getGraphemes({
            text: nameTrimmed,
            locale: 'th'
          })) === null || _getGraphemes2 === void 0 ? void 0 : _getGraphemes2[0];
        }
      }
    default:
      return undefined;
  }
}

export { abbreviateBusinessName, tryAbbreviateBusinessName };
