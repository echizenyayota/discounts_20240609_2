import type { TemplateBuilder } from '@babel/template';
import type Types from '@babel/types';
export declare function fallbackTranslationsImport(template: TemplateBuilder<Types.ImportDeclaration | Types.ObjectExpression>, { id, fallbackLocale }: {
    id: any;
    fallbackLocale: any;
}): Types.ImportDeclaration;
export declare function translationsImport(template: TemplateBuilder<Types.ImportDeclaration | Types.ObjectExpression>, { id }: {
    id: any;
}): Types.ImportDeclaration;
export declare function i18nCallExpression(template: TemplateBuilder<Types.ImportDeclaration | Types.ObjectExpression>, { id, fallbackID, translationArrayID, bindingName, translationFilePaths, fallbackLocale, withExplicitPaths, }: {
    id: any;
    fallbackID: any;
    translationArrayID: any;
    bindingName: any;
    translationFilePaths: any;
    fallbackLocale: any;
    withExplicitPaths: any;
}): Types.ImportDeclaration | Types.ObjectExpression;
export declare function i18nGeneratedDictionaryCallExpression(template: TemplateBuilder<Types.ImportDeclaration | Types.ObjectExpression>, { id, translationsID, bindingName }: {
    id: any;
    translationsID: any;
    bindingName: any;
}): Types.ImportDeclaration | Types.ObjectExpression;
//# sourceMappingURL=babel-templates.d.ts.map