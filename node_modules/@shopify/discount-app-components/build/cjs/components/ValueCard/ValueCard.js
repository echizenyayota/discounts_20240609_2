'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polaris = require('@shopify/polaris');
var reactI18n = require('@shopify/react-i18n');
var constants = require('../../constants.js');
var numbers = require('../../utilities/numbers.js');
var ValueCard$1 = require('./ValueCard.scss.js');
var CurrencyField = require('../CurrencyField/CurrencyField.js');
var AppliesTo = require('../AppliesTo/AppliesTo.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const FIXED_AMOUNT_VALUE_FIELD_ID = 'fixedAmountValueField';
const PERCENTAGE_VALUE_FIELD_ID = 'percentageValueField';
const ONCE_PER_ORDER_CHECKBOX_ID = 'oncePerOrderCheckbox';
const MAX_PERCENTAGE_LENGTH = 100;
const MIN_PERCENTAGE_LENGTH = 1;
function ValueCard({
  fixedAmountDiscountValue,
  percentageDiscountValue,
  discountValueType,
  purchaseType,
  oncePerOrder,
  discountClass,
  currencyCode,
  sellsSubscriptions,
  isCodeDiscount,
  eligibility,
  selectedItems,
  productSelector,
  collectionSelector
}) {
  const [i18n] = reactI18n.useI18n();
  const isPercentageDiscount = discountValueType.value === constants.DiscountValueType.Percentage;
  const isProductDiscount = discountClass === constants.DiscountClass.Product;
  const purchaseTypeChoices = [{
    value: constants.PurchaseType.OneTimePurchase,
    label: i18n.translate('DiscountAppComponents.ValueCard.purchaseType.choices.oneTime')
  }, {
    value: constants.PurchaseType.Subscription,
    label: i18n.translate('DiscountAppComponents.ValueCard.purchaseType.choices.subscription')
  }, {
    value: constants.PurchaseType.Both,
    label: i18n.translate('DiscountAppComponents.ValueCard.purchaseType.choices.both')
  }];
  const handlePercentageValueChange = value => {
    return percentageDiscountValue.onChange(numbers.forcePositiveInteger(value));
  };
  const fixedAmountValueFloat = parseFloat(fixedAmountDiscountValue.value);
  const hasPercentageDiscountValueError = Boolean(percentageDiscountValue.error);
  return /*#__PURE__*/React__default["default"].createElement(polaris.Box, {
    paddingBlockEnd: "400"
  }, /*#__PURE__*/React__default["default"].createElement(polaris.Card, {
    padding: "400"
  }, /*#__PURE__*/React__default["default"].createElement(polaris.BlockStack, {
    gap: "200"
  }, /*#__PURE__*/React__default["default"].createElement(polaris.Text, {
    variant: "headingMd",
    as: "h2"
  }, i18n.translate('DiscountAppComponents.ValueCard.title'), ' '), /*#__PURE__*/React__default["default"].createElement(polaris.InlineStack, {
    gap: "300",
    align: "start"
  }, /*#__PURE__*/React__default["default"].createElement(polaris.ButtonGroup, {
    variant: "segmented"
  }, /*#__PURE__*/React__default["default"].createElement(polaris.Button, {
    size: "large",
    pressed: isPercentageDiscount,
    onClick: () => discountValueType.onChange(constants.DiscountValueType.Percentage)
  }, i18n.translate('DiscountAppComponents.ValueCard.percentageButton')), /*#__PURE__*/React__default["default"].createElement(polaris.Button, {
    size: "large",
    pressed: !isPercentageDiscount,
    onClick: () => discountValueType.onChange(constants.DiscountValueType.FixedAmount)
  }, i18n.translate('DiscountAppComponents.ValueCard.fixedAmountButton'))), /*#__PURE__*/React__default["default"].createElement(polaris.Box, {
    width: "75%"
  }, !isPercentageDiscount && /*#__PURE__*/React__default["default"].createElement(CurrencyField["default"], {
    label: i18n.translate('DiscountAppComponents.ValueCard.discountValueLabel'),
    labelHidden: true,
    id: FIXED_AMOUNT_VALUE_FIELD_ID,
    value: fixedAmountDiscountValue.value,
    maxLength: 15,
    error: fixedAmountDiscountValue.error !== undefined,
    currencyCode: currencyCode,
    onChange: fixedAmountDiscountValue.onChange,
    onBlur: fixedAmountDiscountValue.onBlur,
    positiveOnly: true
  }), isPercentageDiscount && /*#__PURE__*/React__default["default"].createElement(polaris.TextField, {
    autoComplete: "off",
    label: i18n.translate('DiscountAppComponents.ValueCard.discountValueLabel'),
    labelHidden: true,
    suffix: "%",
    value: percentageDiscountValue.value,
    onBlur: percentageDiscountValue.onBlur,
    maxLength: MAX_PERCENTAGE_LENGTH,
    minLength: MIN_PERCENTAGE_LENGTH,
    onChange: handlePercentageValueChange,
    error: hasPercentageDiscountValueError
  }), !isPercentageDiscount && fixedAmountDiscountValue.error && /*#__PURE__*/React__default["default"].createElement("div", {
    className: ValueCard$1["default"].Error
  }, /*#__PURE__*/React__default["default"].createElement(polaris.InlineError, {
    fieldID: FIXED_AMOUNT_VALUE_FIELD_ID,
    message: fixedAmountDiscountValue.error
  })), isPercentageDiscount && percentageDiscountValue.error && /*#__PURE__*/React__default["default"].createElement("div", {
    className: ValueCard$1["default"].Error
  }, /*#__PURE__*/React__default["default"].createElement(polaris.InlineError, {
    fieldID: PERCENTAGE_VALUE_FIELD_ID,
    message: percentageDiscountValue.error
  })))), sellsSubscriptions && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(polaris.Text, {
    variant: "headingMd",
    as: "h2"
  }, i18n.translate('DiscountAppComponents.ValueCard.purchaseType.title')), isCodeDiscount ? /*#__PURE__*/React__default["default"].createElement(polaris.ChoiceList, {
    title: i18n.translate('DiscountAppComponents.ValueCard.purchaseType.choiceListTitle'),
    titleHidden: true,
    choices: purchaseTypeChoices,
    selected: [purchaseType.value],
    onChange: values => purchaseType.onChange(values[0])
  }) : /*#__PURE__*/React__default["default"].createElement("p", null, getPurchaseTypeWarning(discountClass, i18n))), isProductDiscount && !isPercentageDiscount && /*#__PURE__*/React__default["default"].createElement(polaris.Checkbox, {
    id: ONCE_PER_ORDER_CHECKBOX_ID,
    label: i18n.translate('DiscountAppComponents.ValueCard.oncePerOrder'),
    checked: oncePerOrder.value,
    onChange: oncePerOrder.onChange,
    helpText: isNaN(fixedAmountValueFloat) ? i18n.translate('DiscountAppComponents.ValueCard.oncePerOrderHelpText') : i18n.translate('DiscountAppComponents.ValueCard.oncePerOrderHelpTextWithAmount', {
      fixedAmountValue: i18n.formatCurrency(Number(fixedAmountValueFloat), {
        currency: currencyCode,
        precision: 0,
        form: 'explicit'
      })
    })
  }), eligibility && selectedItems && (productSelector || collectionSelector) ? /*#__PURE__*/React__default["default"].createElement(AppliesTo.AppliesTo, {
    eligibility: eligibility,
    selectedItems: selectedItems,
    productSelector: productSelector,
    collectionSelector: collectionSelector
  }) : null)));
}
const getPurchaseTypeWarning = (discountClass, i18n) => {
  switch (discountClass) {
    case constants.DiscountClass.Product:
      return i18n.translate('DiscountAppComponents.ValueCard.purchaseType.warning.product');
    case constants.DiscountClass.Order:
      return i18n.translate('DiscountAppComponents.ValueCard.purchaseType.warning.order');
    case constants.DiscountClass.Shipping:
      return i18n.translate('DiscountAppComponents.ValueCard.purchaseType.warning.shipping');
    default:
      return i18n.translate('DiscountAppComponents.ValueCard.purchaseType.warning.product');
  }
};

exports.ValueCard = ValueCard;
