interface Address {
    address1?: string;
    address2?: string;
    city?: string;
    company?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    province?: string;
    country?: string;
    zip?: string;
    name?: string;
    provinceCode?: string;
    countryCode?: string;
}

export interface AppBridgeAttributes {
}

interface AppBridgeConfig {
    host?: string;
    apiKey: string;
    shop: string;
    locale: string;
    disabledFeatures?: string[];
    experimentalFeatures?: string[];
    appOrigins?: string[];
}

export interface AppBridgeElements {
    'ui-modal': UIModalAttributes;
    'ui-nav-menu': UINavMenuAttributes;
    'ui-save-bar': UISaveBarAttributes;
    'ui-title-bar': UITitleBarAttributes;
}

export type AugmentedElement<T extends keyof AugmentedElements> = AugmentedElements[T];

export interface AugmentedElements {
    button: MenuItemProperties;
    a: MenuItemProperties;
}

interface BaseResource extends Resource {
    variants?: Resource[];
}

interface Cart {
    subtotal: string;
    taxTotal: string;
    grandTotal: string;
    note?: string;
    cartDiscount?: Discount;
    cartDiscounts: Discount[];
    customer?: Customer;
    lineItems: LineItem[];
    properties: Record<string, string>;
}

type CartDiscountType = 'Percentage' | 'FixedAmount';

type CartSubscriber = (cart: Cart) => void;

interface Collection extends Resource {
    availablePublicationCount: number;
    description: string;
    descriptionHtml: string;
    handle: string;
    id: string;
    image?: Image_2 | null;
    productsAutomaticallySortedCount: number;
    productsCount: number;
    productsManuallySortedCount: number;
    publicationCount: number;
    ruleSet?: RuleSet | null;
    seo: {
        description?: string | null;
        title?: string | null;
    };
    sortOrder: CollectionSortOrder;
    storefrontId: string;
    templateSuffix?: string | null;
    title: string;
    updatedAt: string;
}

interface CollectionRule {
    column: string;
    condition: string;
    relation: string;
}

enum CollectionSortOrder {
    Manual = "MANUAL",
    BestSelling = "BEST_SELLING",
    AlphaAsc = "ALPHA_ASC",
    AlphaDesc = "ALPHA_DESC",
    PriceDesc = "PRICE_DESC",
    PriceAsc = "PRICE_ASC",
    CreatedDesc = "CREATED_DESC",
    Created = "CREATED",
    MostRelevant = "MOST_RELEVANT"
}

interface Customer {
    id?: number;
    email?: string;
    firstName?: string;
    lastName?: string;
    note?: string;
}

interface Device {
    name: string;
    serialNumber: string;
}

interface Discount {
    amount: number;
    title?: string;
    type?: CartDiscountType;
}

interface Environment {
    mobile: boolean;
    embedded: boolean;
    pos: boolean;
}

enum FulfillmentServiceType {
    GiftCard = "GIFT_CARD",
    Manual = "MANUAL",
    ThirdParty = "THIRD_PARTY"
}

interface Image_2 {
    id: string;
    altText?: string;
    originalSrc: string;
}

interface LineItem {
    uuid: string;
    price?: number;
    quantity: number;
    title?: string;
    variantId?: number;
    productId?: number;
    discounts: Discount[];
    taxable: boolean;
    sku?: string;
    vendor?: string;
    properties: {
        [key: string]: string;
    };
    isGiftCard: boolean;
}

interface LineItemDiscount {
    title: string;
    type: CartDiscountType;
    amount: string;
}

interface Location_2 {
    id: number;
    active: boolean;
    name: string;
    locationType?: string;
    address1?: string;
    address2?: string;
    zip?: string;
    city?: string;
    province?: string;
    countryCode?: string;
    countryName?: string;
    phone?: string;
}

export interface MenuItemProperties {
    variant?: 'primary' | 'breadcrumb' | null | undefined;
    tone?: 'critical' | 'default';
    disabled?: boolean;
    loading?: boolean | string;
}

type Money = string;

interface Pos {
    cart: {
        fetch(): Promise<Cart>;
        subscribe(onSubscribe: CartSubscriber): Unsubscribe;
        setCustomer(customer: Customer): Promise<void>;
        removeCustomer(): Promise<void>;
        addAddress(address: Address): Promise<void>;
        updateAddress(index: number, address: Address): Promise<void>;
        applyCartDiscount(discount: Discount): Promise<void>;
        applyCartCodeDiscount(code: string): Promise<void>;
        removeCartDiscount(): Promise<void>;
        removeAllDiscounts(disableAutomaticDiscounts: boolean): Promise<void>;
        addCartProperties(properties: Record<string, string>): Promise<void>;
        removeCartProperties(properties: string[]): Promise<void>;
        clear(): Promise<void>;
        addLineItem(variantId: number, quantity: number): Promise<void>;
        updateLineItem(index: string, quantity: number): Promise<void>;
        removeLineItem(index: string): Promise<void>;
        setLineItemDiscount(index: number, discount: LineItemDiscount): Promise<void>;
        removeLineItemDiscount(index: number): Promise<void>;
        addLineItemProperties(index: number, properties: Record<string, string>): Promise<void>;
        removeLineItemProperties(index: number, properties: string[]): Promise<void>;
    };
    close(): Promise<void>;
    device(): Promise<Device>;
    location(): Promise<Location_2>;
}

interface Product extends Resource {
    availablePublicationCount: number;
    createdAt: string;
    descriptionHtml: string;
    handle: string;
    hasOnlyDefaultVariant: boolean;
    images: Image_2[];
    options: {
        id: string;
        name: string;
        position: number;
        values: string[];
    }[];
    productType: string;
    publishedAt?: string | null;
    tags: string[];
    templateSuffix?: string | null;
    title: string;
    totalInventory: number;
    totalVariants: number;
    tracksInventory: boolean;
    variants: Partial<ProductVariant>[];
    vendor: string;
    updatedAt: string;
    status: ProductStatus;
}

enum ProductStatus {
    Active = "ACTIVE",
    Archived = "ARCHIVED",
    Draft = "DRAFT"
}

interface ProductVariant extends Resource {
    availableForSale: boolean;
    barcode?: string | null;
    compareAtPrice?: Money | null;
    createdAt: string;
    displayName: string;
    fulfillmentService?: {
        id: string;
        inventoryManagement: boolean;
        productBased: boolean;
        serviceName: string;
        type: FulfillmentServiceType;
    };
    image?: Image_2 | null;
    inventoryItem: {
        id: string;
    };
    inventoryManagement: ProductVariantInventoryManagement;
    inventoryPolicy: ProductVariantInventoryPolicy;
    inventoryQuantity?: number | null;
    position: number;
    price: Money;
    product: Partial<Product>;
    requiresShipping: boolean;
    selectedOptions: {
        value?: string | null;
    }[];
    sku?: string | null;
    taxable: boolean;
    title: string;
    weight?: number | null;
    weightUnit: WeightUnit;
    updatedAt: string;
}

enum ProductVariantInventoryManagement {
    Shopify = "SHOPIFY",
    NotManaged = "NOT_MANAGED",
    FulfillmentService = "FULFILLMENT_SERVICE"
}

enum ProductVariantInventoryPolicy {
    Deny = "DENY",
    Continue = "CONTINUE"
}

interface Resource {
    /** in GraphQL id format, ie 'gid://shopify/Product/1' */
    id: string;
}

interface ResourcePickerOptions {
    type: 'product' | 'variant' | 'collection';
    query?: string;
    selectionIds?: BaseResource[];
    action?: 'add' | 'select';
    multiple?: boolean | number;
    filter?: {
        hidden?: boolean;
        variants?: boolean;
        draft?: boolean | undefined;
        archived?: boolean | undefined;
        query?: string;
    };
}

type ResourceSelection<Type extends keyof ResourceTypes> = ResourceTypes[Type];

type ResourceTypes = {
    product: Product;
    variant: ProductVariant;
    collection: Collection;
};

interface RuleSet {
    appliedDisjunctively: boolean;
    rules: CollectionRule[];
}

interface ScannerPayload {
    data: string;
}

type SelectPayload<Type extends keyof ResourceTypes> = WithSelection<ResourceSelection<Type>[]>;

export interface ShopifyGlobal {
    config: AppBridgeConfig;
    origin: string;
    ready: Promise<void>;
    environment: Environment;
    loading(isLoading?: boolean): void;
    idToken(): Promise<string>;
    user(): Promise<User>;
    toast: {
        show(message: string, opts?: Partial<ToastOptions>): string;
        hide(id: string): void;
    };
    resourcePicker<Options extends ResourcePickerOptions>(options: Options): Promise<SelectPayload<Options['type']> | undefined>;
    scanner: {
        capture(): Promise<ScannerPayload>;
    };
    modal: {
        show(id: string): Promise<void>;
        hide(id: string): Promise<void>;
        toggle(id: string): Promise<void>;
    };
    saveBar: {
        show(id: string): Promise<void>;
        hide(id: string): Promise<void>;
        toggle(id: string): Promise<void>;
        leaveConfirmation(): Promise<void>;
    };
    pos: Pos;
}

interface ToastOptions {
    duration: number;
    isError: boolean;
    action: string;
    onAction: () => void;
    onDismiss: () => void;
}

export interface UIModalAttributes {
    id?: string;
    variant?: Variant;
    src?: string;
    children?: any;
}

interface UIModalElement_2 extends Omit<HTMLElement, 'addEventListener' | 'removeEventListener'> {
    variant: Variant;
    content?: HTMLElement;
    src?: string;
    readonly contentWindow?: Window | null;
    show(): Promise<void>;
    hide(): Promise<void>;
    toggle(): Promise<void>;
    addEventListener(type: 'show' | 'hide', listener: EventListenerOrEventListenerObject): void;
    removeEventListener(type: 'show' | 'hide', listener: EventListenerOrEventListenerObject): void;
}
export type { UIModalElement_2 as UIModalElement }

export interface UINavMenuAttributes {
    children?: any;
}

interface UINavMenuElement_2 extends HTMLElement {
}
export type { UINavMenuElement_2 as UINavMenuElement }

export interface UISaveBarAttributes {
    id?: string;
    discardConfirmation?: boolean;
    children?: any;
}

interface UISaveBarElement_2 extends Omit<HTMLElement, 'addEventListener' | 'removeEventListener'> {
    discardConfirmation?: boolean;
    show(): Promise<void>;
    hide(): Promise<void>;
    toggle(): Promise<void>;
    addEventListener(type: 'show' | 'hide', listener: EventListenerOrEventListenerObject): void;
    removeEventListener(type: 'show' | 'hide', listener: EventListenerOrEventListenerObject): void;
}
export type { UISaveBarElement_2 as UISaveBarElement }

export interface UITitleBarAttributes {
    title?: string;
    children?: any;
}

interface UITitleBarElement_2 extends HTMLElement {
    title: string;
}
export type { UITitleBarElement_2 as UITitleBarElement }

type Unsubscribe = () => void;

interface User {
    id: string;
    name: string;
    firstName?: string;
    lastName?: string;
    email: string;
    accountAccess: string;
    accountType: string;
}

type Variant = 'small' | 'base' | 'large' | 'max';

enum WeightUnit {
    Kilograms = "KILOGRAMS",
    Grams = "GRAMS",
    Pounds = "POUNDS",
    Ounces = "OUNCES"
}

type WithSelection<T> = T & {
    /**
     * @private
     * @deprecated
     */
    selection: T;
};

export { }
